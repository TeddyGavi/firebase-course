rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Start by closing all access by default, then add what you need
    match /{document=**} {
      allow read, write: if false;
    }

    match /test/{docId} {
      allow read: if true;
      allow write: if false;
    }

    match /test_documents/{id} {
      allow update: if (request.auth != null &&
      resource.data.authorId == request.auth.uid);
    }

    // Add new rules here

    // We have two collections, users and todos  
    // assumptions are users are never doing the right thing
    // CRUD operations on each collection (minus the delete on users...)
    // Best to create reuseable functions that can clean up the code
    // Standard here is a simple function with one return statement, typically true or false or get some data
    // Limit the incoming request by time?

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(Id){
      return request.auth.uid == Id;
    }

    function isSignedInOwner(Id) {
      return isSignedIn() && isOwner(Id)
    }

  // need to read the user document, not availabe on the user object, so need to use a different approach

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data
    }

    function isAdmin() {
      return getUserData().isAdmin == true
    }

    function existingData() {
      return resource.data
    }

    function incomingData() {
      return request.resource.data
    }

    function isAdminChanged() {
      // return incomingData().keys().hasAll(['isAdmin']) || incomingData().diff(existingData()).affectedKeys().hasAll(['isAdmin'])
      return incomingData().diff(existingData()).affectedKeys().hasOnly(['isAdmin'])
    }
    
  // resource is existing data info -> for updating, deleting and reading
  // request.resource is incoming data -> represents state of new data, present only on write requests
  // "capture" id in {}

    match /todos/{todoId} {
    // Any authenticated user may create to-do items for themselves.
      allow create: if isSignedInOwner(incomingData().uid) && incomingData().name is string && incomingData().name.size() > 0

    // Users can view, update and delete their own to-do items.
      allow read, update, delete: if isSignedInOwner(existingData().uid)

    }
    match /users/{userId} {
    // Any authenticated user may create a profile and view other users' profiles.
      allow read, create: if isSignedIn()

    // Any authenticated user is allowed to edit their own profile.
    // Admin users can edit any user's profile.
    // Only the admin users can make other users admins.
      allow update: if isSignedIn() && (isAdmin() || isOwner(userId)) && !(isAdminChanged())

    }
    
   
  }
}